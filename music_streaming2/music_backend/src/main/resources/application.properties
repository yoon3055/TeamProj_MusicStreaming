spring.application.name=music

# MySQL \uB370\uC774\uD130\uC18C\uC2A4 \uC124\uC815
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/music?allowPublicKeyRetrieval=true&useSSL=false&createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=1234


# JPA 설정
spring.jpa.database=mysql
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show_sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.show_sql=false
spring.jpa.properties.hibernate.hbm2ddl.auto=update

# Hibernate 로깅 비활성화
# logging.level.org.hibernate.SQL=ERROR
# logging.level.org.hibernate.type.descriptor.sql.BasicBinder=ERROR
# logging.level.org.hibernate.tool.hbm2ddl=ERROR

# JPA (Hibernate) 
# spring.jpa.hibernate.ddl-auto: . 
# : update ()
# : none validate ()

# Jackson JSON (Hibernate Lazy Loading )
spring.jackson.serialization.fail-on-empty-beans=false

# Spring Security OAuth2 (Google)
spring.security.oauth2.client.registration.google.client-id=xxxx
spring.security.oauth2.client.registration.google.client-secret=yyyy
spring.security.oauth2.client.registration.google.scope=openid,email,profile
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code

# Spring Security OAuth2 \uD504\uB85C\uBC14\uC774\uB354 \uC124\uC815 (Google)
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://openidconnect.googleapis.com/v1/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# JWT \uC124\uC815
jwt.secret=b2F1dGhzZXJ2ZXJzZWNyZXRhY2Nlc3N0b2tlbm9hdXRoc2VydmVyc2VjcmV0YWNjZXNzdG9rZW5vYXV0aHNlcnZlcnNlY3JldGFjY2Vzc3Rva2Vu
jwt.expmin=120

# OAuth (Google)
oauth.google.client-id=xxxx
oauth.google.client-secret=yyyy
oauth.google.redirect-uri=http://localhost:3000/oauth/google/redirect

# 이메일에 임시 비밀번호 보내는것
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=blackgurotest@gmail.com
spring.mail.password=frrl vykl rntc zsgf
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com

# music.upload.path=music_backend/uploads/musicfile
# 파일 업로드 설정
music.upload.path=uploads/musicfile
music.base.url=http://localhost:8080

# 파일 업로드 크기 제한 (200MB)
spring.servlet.multipart.max-file-size=200MB
spring.servlet.multipart.max-request-size=200MB

# spring.web.resources.static-locations=classpath:/static/,file:music_backend/uploads/musicfile/
# 정적 리소스 서빙 설정
spring.web.resources.static-locations=classpath:/static/,file:uploads/musicfile/

# 파일 업로드 설정
spring.servlet.multipart.enabled=true
spring.servlet.multipart.file-size-threshold=1MB

# 
logging.level.com.music.music.service.MusicUploadService=INFO
logging.level.root=INFO
spring.mail.properties.mail.smtp.ssl.protocols=TLSv1.2

# JWT 
logging.level.com.music.interceptor.JwtInterceptor=WARN

# 
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
logging.level.org.springframework.web.servlet.DispatcherServlet=ERROR
logging.level.org.springframework.web.servlet.mvc.method.annotation=ERROR
logging.level.org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor=ERROR
logging.level.org.springframework.web=ERROR
logging.level.org.springframework.context=ERROR
