plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	
/* -------------------------------------------------------------------
 * 1) Node‑Gradle 플러그인 추가  (plugins {} 맨 아래 쪽에 한 줄 삽입)
 * ------------------------------------------------------------------- */
	    id "com.github.node-gradle.node" version "7.0.2"
	
}

group = 'com.music'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'   // UI + /v3/api-docs 모두 포함 :contentReference[oaicite:0]{index=0}
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'







	runtimeOnly 'com.mysql:mysql-connector-j' // MySQL JDBC 드라이버

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// ==================

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5' // 또는 jjwt-gson, jjwt-orgjson
	// 기타 필요한 의존성 (예: spring-boot-starter-web, spring-boot-starter-data-jpa 등)

	// ========================================

	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// ==============================================

	implementation 'org.springframework.boot:spring-boot-starter-mail'
	// 메일





}

tasks.named('test') {
	useJUnitPlatform()
}


//
///* -------------------------------------------------------------------
// * 2) Node 설정 : 프론트엔드 루트와 버전 지정
// * ------------------------------------------------------------------- */
//node {
//    version          = "22.17.0"                       // NVM 써도 OK – 빌드 시 자동 설치
//    download         = false                            // CI/CD에서도 동일 버전 확보
//    nodeProjectDir   = file("$projectDir/../music_frontend") // React app 폴더 경로
//}
//
///* -------------------------------------------------------------------
// * 3) React 빌드 & 복사 작업 정의
// * ------------------------------------------------------------------- */
//import com.github.gradle.node.npm.task.NpmTask
//
//// npm run build
//tasks.register("npmBuild", NpmTask) {
//    args.set(["run", "build"])
//    dependsOn tasks.npmInstall
//}
//
//// build 결과를 Spring Boot static/ 으로 복사
//tasks.register("copyFrontend", Copy) {
//    dependsOn tasks.named("npmBuild")
//    from("$projectDir/../frontend/build")
//    into("$buildDir/resources/main/static")            // bootJar가 인식할 위치
//}
//
//// backend 빌드 전에 프론트 빌드·복사 자동 실행
//tasks.named("processResources") {
//    dependsOn tasks.named("copyFrontend")
//}
//
